{
  "indentationSize": 4,
  "package": "${__fullPackage__}",
  "imports": [
    "android.content.Context",
    "android.util.Log",
    "android.view.View",
    "android.view.View.OnClickListener",
    "com.google.appinventor.components.annotations.*",
    "com.google.appinventor.components.common.*",
    "com.google.appinventor.components.runtime.*",
    "com.google.appinventor.components.runtime.util.YailList",
    "java.lang.reflect.*",
    "java.util.ArrayList"
  ],
  "mainClass": {
    "annotations": [
      {
        "name": "DesignerComponent",
        "values": {
          "version": "${__componentName__}.VERSION",
          "description": "\"${__description__}\"",
          "category": "ComponentCategory.EXTENSION",
          "nonVisible": "true"
        }
      },
      { "name": "SimpleObject", "values": { "external": "true" } }
    ],
    "accessModifier": "public",
    "name": "${__componentName__}",
    "extends": "AndroidNonvisibleComponent",
    "attributes": [
      {
        "accessModifier": "public",
        "nonAccessModifiers": [ "static", "final" ],
        "type": "String",
        "name": "LOG_TAG",
        "value": "\"${__componentName__}\""
      },
      {
        "accessModifier": "public",
        "nonAccessModifiers": [ "static", "final" ],
        "type": "int",
        "name": "VERSION",
        "value": "${__version__}"
      },
      {
        "___templateName": "propertyDefaultValue",
        "accessModifier": "private",
        "nonAccessModifiers": [ "static", "final" ],
        "type": "${_type_}",
        "name": "DEFAULT_${_name_}",
        "value": "${_defaultValue_}"
      },
      {
        "accessModifier": "private",
        "nonAccessModifiers": [ "final" ],
        "type": "Context",
        "name": "context"
      },
      {
        "accessModifier": "private",
        "nonAccessModifiers": [ "final" ],
        "type": "Form",
        "name": "form"
      },
      {
        "accessModifier": "private",
        "nonAccessModifiers": [ "final" ],
        "type": "ArrayList<Element>",
        "name": "elementList",
        "value": "new ArrayList<Element>()"
      },
      {
        "accessModifier": "private",
        "type": "HVArrangement",
        "name": "vaContainer"
      },
      {
        "accessModifier": "private",
        "type": "int",
        "name": "currentListSize",
        "value": "0"
      },
      {
        "___templateName": "propertyField",
        "accessModifier": "private",
        "type": "${_type_}",
        "name": "${_name_}",
        "value": "DEFAULT_${_name_}"
      }
    ],
    "constructors": [
      {
        "accessModifier": "public",
        "arguments": [ { "type": "ComponentContainer", "name": "container" } ],
        "statements": [
          "super(container.$form());",
          "Log.d(LOG_TAG, LOG_TAG + \" Created\");",
          "this.context = container.$context();",
          "this.form = container.$form();"
        ]
      }
    ],
    "methods": [
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "Initialize",
        "arguments": [ { "type": "VerticalArrangement", "name": "verticalArrangement" } ],
        "statements": [
          "vaContainer = verticalArrangement;",
          "vaContainer.AlignHorizontal(ComponentConstants.GRAVITY_CENTER_HORIZONTAL);"
        ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "Initialize_Scroll",
        "arguments": [ { "type": "VerticalScrollArrangement", "name": "verticalScrollArrangement" } ],
        "statements": [
          "vaContainer = verticalScrollArrangement;",
          "vaContainer.AlignHorizontal(ComponentConstants.GRAVITY_CENTER_HORIZONTAL);"
        ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "Clear",
        "statements": [ "Set(YailList.makeEmptyList());" ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "Set",
        "arguments": [ { "type": "YailList", "name": "list" } ],
        "statements": [
          "int size = list.size();",
          "Object sublistElement;",
          "for (int i=0; i<size; i++) {",
          [
            "sublistElement = list.getObject(i);",
            "if (sublistElement instanceof YailList) {",
            [
              "if (currentListSize > i) {",
              [
                "SetElement(i+1, (YailList)sublistElement);",
                "//call the function that is shown in bky, so the index start from 1"
              ],
              "} else {",
              [ "AddElement((YailList)sublistElement);" ],
              "}"
            ],
            "} else {",
            [ "//TODO: if allowing a non-YailList object as an list item, add here" ],
            "}"
          ],
          "}",
          "// hide the elements that is created but not uesd",
          "for (int i=list.size(); i<currentListSize; i++) {",
          [ "elementList.get(i).hide();" ],
          "}",
          "currentListSize = list.size();"
        ]
      },
      {
        "accessModifier": "private",
        "type": "YailList",
        "name": "getYailList",
        "arguments": [ { "type": "Object...", "name": "obj" } ],
        "statements": [ "return YailList.makeList(obj);" ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "AddElement",
        "arguments": [ { "type": "YailList", "name": "elementData" } ],
        "statements": [
          "int elementListSize = elementList.size();",
          "if (currentListSize<elementListSize && elementListSize>0) {",
          [
            "Element ele = elementList.get(currentListSize);",
            "ele.show();",
            "ele.set(elementData);"
          ],
          "} else {",
          [
            "final int elementIndex = currentListSize;",
            "elementList.add(new Element(vaContainer, elementData) {",
            [
              "@Override",
              "public void onElementClick() {",
              [ "ElementClick(elementIndex);" ],
              "}",
              [
                "___templateName:eventImplement",
                "@Override",
                "public void on${_name_}() {",
                [ "${_name_}(elementIndex);" ],
                "}"
              ]
            ],
            "});"
          ],
          "}",
          "currentListSize++;"
        ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "AddEmptyElement",
        "statements": [ "AddElement(YailList.makeEmptyList());" ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "SetElement",
        "arguments": [
          { "type": "int", "name": "elementIndex"},
          { "type": "YailList", "name": "element" }
        ],
        "statements": [
          "if (elementIndex<1 || elementIndex>currentListSize) {",
          [ "return;" ],
          "}",
          "Element ele = elementList.get(elementIndex-1);",
          "ele.show();",
          "ele.set(element);"
        ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "SetElementText",
        "arguments": [
          { "type": "int", "name": "elementIndex"},
          { "type": "String", "name": "text" }
        ],
        "statements": [
          "if (elementIndex<1 || elementIndex>currentListSize) {",
          [ "return;" ],
          "}",
          "elementList.get(elementIndex-1).setText(text);"
        ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "type": "YailList",
        "name": "GetElement",
        "arguments": [ { "type": "int", "name": "elementIndex"} ],
        "statements": [ "return YailList.makeList(getElementWithObject(elementIndex));" ]
      },
      {
        "accessModifier": "public",
        "type": "Object[]",
        "name": "getElementWithObject",
        "arguments": [ { "type": "int", "name": "elementIndex"} ],
        "statements": [
          "Element element = elementList.get(elementIndex-1);",
          "//TODO: implement this",
          "return new Object[0];"
        ]
      },
      {
        "annotations": [ { "name": "SimpleFunction" } ],
        "accessModifier": "public",
        "name": "RemoveElement",
        "arguments": [ { "type": "int", "name": "elementIndex"} ],
        "statements": [
          "if (elementIndex < 1 || elementIndex > currentListSize) {",
          [ "return;" ],
          "}",
          "for (int i = elementIndex - 1; i<currentListSize - 1; i++) {",
          [ "copyElement(i + 1, i);" ],
          "}",
          "elementList.get(currentListSize - 1).hide();",
          "currentListSize--;"
        ]
      },
      {
        "annotations": [],
        "accessModifier": "private",
        "name": "copyElement",
        "arguments": [ { "type": "int", "name": "indexFrom"}, { "type": "int", "name": "indexTo"} ],
        "statements": [
          "SetElement(",
          [
            "indexTo + 1,",
            "getYailList(GetElement(indexFrom+1).toArray())",
            "// trun into object[] first, avoiding reference confusing. (create a new object)"
          ],
          ");"
        ]
      },
      {
        "annotations": [ { "name": "SimpleEvent", "values": { "description": "\"Element is clicked\"" } } ],
        "accessModifier": "public",
        "name": "ElementClick",
        "arguments": [ { "type": "int", "name": "elementIndex"} ],
        "statements": [
          "EventDispatcher.dispatchEvent(this, \"ElementClick\", 1 + elementIndex);"
        ]
      },
      {
        "___templateName": "event",
        "annotations": [ { "name": "SimpleEvent", "values": { "description": "\"${_description_}\"" } } ],
        "accessModifier": "public",
        "name": "${_name_}",
        "arguments": [ { "type": "int", "name": "elementIndex"} ],
        "statements": [ "EventDispatcher.dispatchEvent(this, \"${_name_}\", 1 + elementIndex);" ]
      },
      {
        "___templateName": "propertySetter",
        "annotations": [
          {
            "name": "SimpleProperty",
            "values": {
              "description": "\"${_description_}\"",
              "category": "PropertyCategory.${_category_}",
              "userVisible":"${_setterVisible_}"
            }
          },
          {
            "___templateIf": "designerVisible",
            "name": "DesignerProperty",
            "values": {
              "editorType": "\"${_editorType_}\"",
              "defaultValue": "\"\" + DEFAULT_${_name_}",
              "editorArgs":"${_args_}"
            }
          }
        ],
        "accessModifier": "public",
        "name": "${_name_}",
        "arguments": [ { "type": "${_type_}", "name": "${_name_}" } ],
        "statements": [
          "this.${_name_} = ${_name_};",
          "refreshElementProperties();"
        ]
      },
      {
        "___templateName": "propertyGetter",
        "annotations": [
          {
            "name": "SimpleProperty",
            "values": {
              "description": "\"${_description_}\"",
              "category": "PropertyCategory.${_category_}",
              "userVisible":"${_getterVisible_}"
            }
          }
        ],
        "accessModifier": "public",
        "type": "${_type_}",
        "name": "${_name_}",
        "statements": [ "return ${_name_};" ]
      },
      {
        "accessModifier": "private",
        "name": "refreshElementProperties",
        "statements": [
          "for (int i = 0; i < currentListSize; i ++) {",
          [ "elementList.get(i).refreshProperties();" ],
          "}"
        ]
      }
    ],
    "classes": [
      {
        "accessModifier": "private",
        "name": "Element",
        "implements": [ "OnClickListener" ],
        "attributes": [
          {
            "accessModifier": "private",
            "type": "ComponentContainer",
            "name": "container"
          },
          {
            "___templateName": "elementComponent",
            "accessModifier": "private",
            "type": "${_type_}",
            "name": "${_name_}"
          }
        ],
        "constructors": [
          {
            "accessModifier": "public",
            "arguments": [
              { "type": "ComponentContainer", "name": "container" },
              { "type": "YailList", "name": "list" }
            ],
            "statements": [
              "this.container = container;",
              "create();",
              "set(list);"
            ]
          }
        ],
        "methods": [
          {
            "accessModifier": "public",
            "name": "onElementClick"
          },
          {
            "___templateName": "elementEvent",
            "accessModifier": "public",
            "name": "on${_name_}"
          },
          {
            "annotations": [ { "name": "Override" } ],
            "accessModifier": "public",
            "name": "onClick",
            "arguments": [ { "type": "View", "name": "view" } ],
            "statements": [ "onElementClick();" ]
          },
          {
            "accessModifier": "private",
            "name": "create",
            "statements": [
              [
                "___templateName:elementCreate",
                "${_name_} = new ${_type_}(${_container_});"
              ],
              [
                "___templateName:elementSetDefaultProperty",
                "setProperty(${_name_}, \"${_propName_}\", \"${_propValue_}\");"
              ],
              "refreshProperties();"
            ]
          },
          {
            "accessModifier": "public",
            "name": "refreshProperties",
            "statements": [
              "show();",
              [
                "___templateName:elementRefreshProperties",
                "setProperty(${_name_}, \"${_propName_}\", \"${_propValue_}\"); // TODO:"
              ]
            ]
          },
          {
            "accessModifier": "private",
            "name": "setProperty",
            "arguments": [
              { "type": "AndroidViewComponent", "name": "component"},
              { "type": "String", "name": "propName" },
              { "type": "String", "name": "propValue" }
            ],
            "statements": [
              "Class<?> claz = component.getClass();",
              "Method[] methods = claz.getMethods();",
              "Method setter = null;",
              "for (Method method : methods) {",
              [
                "if (method.getName().equals(propName) && method.getParameterCount() == 1) {",
                [
                  "setter = method;",
                  "break;"
                ],
                "}"
              ],
              "}",
              "// May be null",
              "Parameter param = setter.getParameters()[0];",
              "try {",
              [
                "if (param.getType() == String.class) {",
                [ "setter.invoke(component, propValue);" ],
                "} else if (param.getType() == Boolean.TYPE) {",
                [ "setter.invoke(component, Boolean.getBoolean(propValue));" ],
                "} else if (param.getType() == Integer.TYPE) {",
                [ "setter.invoke(component, Integer.parseInt(propValue));" ],
                "} else if (param.getType() == Float.TYPE) {",
                [ "setter.invoke(component, Float.parseFloat(propValue));" ],
                "} else if (param.getType() == Double.TYPE) {",
                [ "setter.invoke(component, Double.parseDouble(propValue));" ],
                "} else {",
                [
                  "// TODO:",
                  "// java.lang.Character#TYPE",
                  "// java.lang.Byte#TYPE",
                  "// java.lang.Short#TYPE",
                  "// java.lang.Long#TYPE",
                  "// java.lang.Void#TYPE",
                  "throw new IllegalArgumentException(\"Cannot cast property into target type of property \\\"\" + propName + \"\\\". Require \" + param.getType().getName() + \", get \\\"\" + propValue + \"\\\"\");"
                ],
                "}"
              ],
              "} catch (IllegalAccessException | InvocationTargetException e) {",
              [ "throw new IllegalArgumentException(e);" ],
              "}"
            ]
          },
          {
            "accessModifier": "public",
            "name": "show",
            "statements": [
              [
                "___templateName:elementShow",
                "TODO:"
              ]
            ]
          },
          {
            "accessModifier": "public",
            "name": "hide",
            "statements": [
              [
                "___templateName:elementHide",
                "TODO:"
              ]
            ]
          },
          {
            "accessModifier": "public",
            "name": "setText",
            "arguments": [ { "type": "String", "name": "text" } ],
            "statements": [
              [
                "___templateName:elementSetText",
                "TODO:"
              ]
            ]
          },
          {
            "accessModifier": "public",
            "type": "String",
            "name": "getText",
            "statements": [
              [
                "___templateName:elementGetText",
                "TODO:"
              ],
              "return \"\";"
            ]
          },
          {
            "accessModifier": "public",
            "name": "set",
            "arguments": [ { "type": "YailList", "name": "list" } ],
            "statements": [
              "int size=list.toArray().length;",
              [
                "___templateName:elementSet",
                "TODO:"
              ]
            ]
          }
        ]
      }
    ]
  },
  "otherClasses": []
}
